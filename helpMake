# (c) Harold Thimbleby harold@thimbleby.net http://www.harold.thimbleby.net May 2016
# Version 1.0
#
# when you use make for latex/bibtex/makeindex make gets confused with circular dependencies
# 
# Use: helpMake files[-target]... "command arguments > etc"
#
# Meaning: when you run the command, the target file(s) should be created
# So in a makefile you might say
#
# doc.aux-target: doc.tex doc.bbl
#	helpMake doc.aux "latex doc.tex"
#
# doc.bbl-target: doc.aux
#	helpMake doc.bbl "bibtex doc.aux"
#
# HOW IT WORKS
# file and file-target are the same files, using them avoids make spotting circular dependencies
# but the files are only updated if running the command changes their contents. 
# file-target gets updated so make is happy for this rule
# but file (if its contents did not change) is not updated, so other rules depending on it do not file
# moreover, because file and file-target are the same file, 
# but make does not realise, the circular dependencies are broken
# .... will create temporary files *-temp-$$ (and will remove them if it runs to completion)
	
me=`basename $0`

if [ $# -lt 2 ]
then
	echo Usage: $me "files[-target]..." '"command and arguments... > etc"'
	exit
fi

temp="-temp-$$.tmp" # put a suffix on it to reduce name collisions
target="-target"

cmd="${!#}"

i=1;
while [ $i -lt $# ]
do
	targetName=`basename ${!i} $target`
	if [ -e $targetName$temp ]
		then
			echo $targetName$temp already exists, unsafe to proceed!
			exit
	fi
	rm -f $targetName$target
	if [ -e $targetName ]
		then
			mv $targetName $targetName$temp # the temp file preserves the timestamp
			cp $targetName$temp $targetName
	fi
	i=`expr $i + 1`
done

# echo $me running: $cmd 
echo $cmd | sh

updated=""
nupdated=0
created=""
ncreated=0
notupdated=""
nnotupdated=0

i=1;
while [ $i -lt $# ]
do
	# if there is a temp file, we have a saved version to compare
	targetName=`basename ${!i} $target`
	if [ -e $targetName$temp ]
		then
			if cmp -s $targetName $targetName$temp
				then
					# echo $targetName not updated by $cmd
					if [ "$notupdated" != "" ]; then notupdated="$notupdated, "; fi
					notupdated="$notupdated$targetName"
					nnotupdated=`expr $nnotupdated + 1`
					mv $targetName$temp $targetName # restore its timestamp
				else
					# echo $targetName updated by $cmd
					if [ "$updated" != "" ]; then updated="$updated, "; fi
					updated="$updated$targetName"
					nupdated=`expr $nupdated + 1`
					rm $targetName$temp # now obsolete
			fi
			else
				# echo $targetName created by $cmd
				if [ "$created" != "" ]; then created="$created, "; fi
				created="$created$targetName"
				ncreated=`expr $ncreated + 1`
	fi
	touch $targetName$target # the -target is updated to fool make
	i=`expr $i + 1`
done

summarise () {
	if [ $1 -gt 1 ]; then 
 		echo "$me" $1 $2 files: $3
	else
		if [ $1 -gt 0 ]; then 
 			echo "$me" $1 $2 file: $3
		fi
	fi
}

summarise $ncreated created "$created"
summarise $nupdated updated "$updated"
summarise $nnotupdated unchanged "$notupdated"

